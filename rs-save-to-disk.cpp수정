// License: Apache 2.0. See LICENSE file in root directory.
// Copyright(c) 2015-2017 Intel Corporation. All Rights Reserved.

#include <librealsense2/rs.hpp> // Include RealSense Cross Platform API
#include <Windows.h>
#include <fstream>              // File IO
#include <iostream>             // Terminal IO
#include <sstream>              // Stringstreams
#include <vector>
// 3rd party header for writing png files
#define STB_IMAGE_WRITE_IMPLEMENTATION
#include "stb_image_write.h"
#include "PythonInclude.h"

using namespace std;
// Helper function for writing metadata to disk as a csv file
void metadata_to_csv(const rs2::frame& frm, const std::string& filename);

// This sample captures 30 frames and writes the last frame to disk.
// It can be useful for debugging an embedded system with no display.
int main(int argc, char* argv[]) try
{
    // Declare depth colorizer for pretty visualization of depth data
    for (int i = 0; i < 1; i++)
    {
        rs2::colorizer color_map;

        // Declare RealSense pipeline, encapsulating the actual device and sensors
        rs2::pipeline pipe;
        // Start streaming with default recommended configuration

        pipe.start();

        // Capture 30 frames to give autoexposure, etc. a chance to settle
        for (auto i = 0; i < 30; ++i) pipe.wait_for_frames();

        // Wait for the next set of frames from the camera. Now that autoexposure, etc.
        // has settled, we will write these to disk
        rs2::frameset frames = pipe.wait_for_frames();
        rs2::depth_frame depth = frames.get_depth_frame();

        for (auto&& frame : pipe.wait_for_frames())
        {

            // We can only save video frames as pngs, so we skip the rest
            if (auto vf = frame.as<rs2::video_frame>())
            {
                auto stream = frame.get_profile().stream_type();
                // Use the colorizer to get an rgb image for the depth stream
                if (vf.is<rs2::depth_frame>()) vf = color_map.process(frame);

                // Write images to disk
                std::stringstream png_file;
                //png_file << "image"<<i << vf.get_profile().stream_name() << ".png";
                png_file << "image" << vf.get_profile().stream_name() << i << ".png";
                stbi_write_png(png_file.str().c_str(), vf.get_width(), vf.get_height(),
                    vf.get_bytes_per_pixel(), vf.get_data(), vf.get_stride_in_bytes());
                std::cout << "Saved" << i << png_file.str() << std::endl;

                // Record per-frame metadata for UVC streams
                //std::stringstream csv_file;
                //csv_file << "rs-save-to-disk-output-"<<i << vf.get_profile().stream_name()
                   //<< "-metadata.csv";
                //metadata_to_csv(vf, csv_file.str());
            }
        }

        // 좌표값을 받은 다음에, frame에 대해서 depth부분에 좌표값을 넣어 depth를 추출한다.
        PyObject* pName, * pModule, * pFunc, * pValue;
        Py_Initialize();

        /*PyRun_SimpleStringFlags("import sys",0);
        PyRun_SimpleString("sys.path");*/
        PyRun_SimpleString("import hi");
        PyRun_SimpleString("hi.st()");

        PyObject* myModuleString = PyUnicode_FromString((char*)"hi");
        // object detection tutorial.py 를 실행하는 함수명이 담긴 파이썬 파일명
        PyObject* myModule = PyImport_Import(myModuleString);
        PyObject* myFunction = PyObject_GetAttrString(myModule, (char*)"st"); 
        // object detection tutorial.py 를 실행하는 함수명
        pValue = PyObject_CallObject(myFunction, NULL);

        if (pValue != NULL)
        {
            printf("%d\n", PyList_Check(pValue));
            int count = (int)PyList_Size(pValue);
            printf("count : %d\n", count);
            vector<float> temp(count);
            string tmp;
            PyObject* ptemp, * objectsRepresentation;
            const char* all;
            for (int i = 0; i < count; i++)
            {
                ptemp = PyList_GetItem(pValue, i);
                objectsRepresentation = PyObject_Repr(ptemp);
                PyObject* str = PyUnicode_AsEncodedString(objectsRepresentation, "utf-8", "~E~");
                all = PyBytes_AsString(str);
                if (i == 2)
                    tmp = all; // 객체인식 라벨명
                else
                    temp[i] = (float)strtod(all, NULL); // 객체인식 바운딩박스의 평균 x,y좌표
                
            }
            float dist_to_center = depth.get_distance(temp[0], temp[1]); //카메라로부터의 객체 거리
            std::cout << "The camera is facing an object " << dist_to_center << " meters away \n" << "The object is " << tmp << "\n";
            Sleep(5000);
        }
        else
        {
            printf("Null");
        }
        Py_Finalize();


    }

    return EXIT_SUCCESS;
}
catch (const rs2::error& e)
{
    std::cerr << "RealSense error calling " << e.get_failed_function() << "(" << e.get_failed_args() << "):\n    " << e.what() << std::endl;
    return EXIT_FAILURE;
}
catch (const std::exception& e)
{
    std::cerr << e.what() << std::endl;
    return EXIT_FAILURE;
}

void metadata_to_csv(const rs2::frame& frm, const std::string& filename)
{
    std::ofstream csv;

    csv.open(filename);

    //    std::cout << "Writing metadata to " << filename << endl;
    csv << "Stream," << rs2_stream_to_string(frm.get_profile().stream_type()) << "\nMetadata Attribute,Value\n";

    // Record all the available metadata attributes
    for (size_t i = 0; i < RS2_FRAME_METADATA_COUNT; i++)
    {
        if (frm.supports_frame_metadata((rs2_frame_metadata_value)i))
        {
            csv << rs2_frame_metadata_to_string((rs2_frame_metadata_value)i) << ","
                << frm.get_frame_metadata((rs2_frame_metadata_value)i) << "\n";
        }
    }

    csv.close();
}
